{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Embedded Blogs","text":""},{"location":"#embedded-roadmaps","title":"Embedded Roadmaps","text":"<ol> <li>Mohammed Numeir</li> </ol>"},{"location":"companies/list/","title":"List","text":""},{"location":"companies/list/#companies-market-cap","title":"Companies Market Cap","text":""},{"location":"companies/list/#crunch-base","title":"Crunch Base","text":""},{"location":"companies/semiconductor/espressif/","title":"Dev Tools - Click to check devkit for module","text":"<ol> <li>All ESP kits</li> <li>DevKitC-32E @Rs.815 with ESP32-WROOM-32E-N4 @Rs.245</li> <li>S2-DevKitC-1 @Rs.735 with ESP32-S2-SOLO-N4 @Rs.190 </li> <li>C3-DevKitC-02 @Rs.735 with ESP32-C3-WROOM-02-N4 @Rs.160</li> <li>C3-DevKitM-1 @Rs.735</li> <li>S3-DevKitC-1-N8 @Rs.1225</li> <li>S2-DevKitM-1 @Rs.750</li> </ol>"},{"location":"companies/semiconductor/espressif/#local-link","title":"Local Link","text":"<ol> <li>https://www.campuscomponent.com/products/esp32-devkitc-32e-development-wi-2543-d/2208614000015528807?variant=2208614000015528807</li> </ol>"},{"location":"companies/semiconductor/espressif/#espressif","title":"Espressif","text":"<ol> <li>https://www.espressif.com/en/products/modules</li> <li>https://www.espressif.com/en/products/devkits</li> <li>https://www.espressif.com/en/products/software</li> <li>https://www.espressif.com/en/support/documents/technical-documents</li> <li>https://www.espressif.com/en/ecosystem/community-engagement/projects</li> <li>https://www.espressif.com/en/ecosystem/community-engagement/courses?field_type_tid=All&amp;field_course_language_tid=164</li> </ol>"},{"location":"companies/semiconductor/espressif/#espressif-docs","title":"Espressif Docs","text":"<ol> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32c2/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32c6/get-started/index.html</li> <li>https://docs.espressif.com/projects/esp-idf/en/latest/esp32h2/get-started/index.html</li> </ol>"},{"location":"companies/semiconductor/espressif/#buy-online","title":"Buy Online","text":"<ol> <li>https://www.mouser.in/c/embedded-solutions/wireless-rf-modules/?m=Espressif&amp;instock=y&amp;sort=pricing</li> </ol>"},{"location":"companies/semiconductor/espressif/#install-guide","title":"Install Guide","text":"<ol> <li>https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/tutorial/install.md</li> </ol>"},{"location":"companies/semiconductor/espressif/#best-courses","title":"Best Courses","text":"<ol> <li>ESP-IDF ControllersTech</li> <li>Espressif Webinars : Matter May 2023</li> <li>Espressif DevCon22 Talks</li> <li>https://learnesp32.com/stripe/purchase</li> </ol>"},{"location":"companies/semiconductor/espressif/#udemy-courses","title":"Udemy Courses","text":"<ol> <li>https://www.udemy.com/course/iot-home-automation-arduino-esp32/</li> <li>https://www.udemy.com/course/iot-automation-with-arduino-ide-by-esp32-board-part-2/</li> <li>https://www.udemy.com/course/iot-automation-with-arduino-ide-by-esp32-board-part-3/</li> <li>https://www.udemy.com/course/iot-application-development-with-the-esp32-using-the-esp-idf/</li> </ol>"},{"location":"companies/semiconductor/espressif/#best-projects-on-github","title":"Best Projects on Github","text":"<ol> <li>https://github.com/Aircoookie/WLED</li> <li>https://github.com/esphome/esphome</li> </ol>"},{"location":"companies/semiconductor/nordic/","title":"Nordic Semi","text":"<ol> <li>https://www.nordicsemi.com/Support/Documentation</li> <li>https://webinars.nordicsemi.com/bluetooth-low-energy</li> <li>https://www.nordicsemi.com/Applications</li> </ol>"},{"location":"companies/semiconductor/nordic/#buy-online","title":"Buy Online","text":"<ol> <li>https://www.digikey.in/en/products/filter/rf-transceiver-ics/879?s=N4IgjCBcoLQExVAYygFwE4FcCmAaEA9lANogCsIAugL7X4KSkB2B6AJgJYqX4BsiIDmyggYYAAwR8AB1QiQ%2BVAE9p2EQEMAzilpA</li> </ol>"},{"location":"embedded/embedded-for-all/","title":"Embedded for all","text":""},{"location":"embedded/embedded-for-all/#embedded-for-all","title":"Embedded For All","text":""},{"location":"embedded/learn-embedded-systems/","title":"Learn Embedded Systems","text":""},{"location":"embedded/neso-acedemy/","title":"Neso acedemy","text":""},{"location":"embedded/neso-acedemy/#neso-academy","title":"Neso Academy","text":"<ol> <li>Operating System</li> </ol>"},{"location":"embedded/phil/","title":"Phil Koopman","text":""},{"location":"embedded/phil/#phil-koopman","title":"Phil Koopman","text":""},{"location":"embedded/phil/#embedded-courses","title":"Embedded Courses","text":""},{"location":"embedded/phil/#best-courses","title":"[Best Courses]","text":"<ol> <li>18-642: Embedded Software Engineering. (Code quality, safety, security)</li> <li>18-348: Embedded System Engineering. (Microcontroller hardware, software, I/O, coding techniques) - Other Link</li> <li>18-649: Distributed Embedded Systems. (Software process, distributed systems, embedded networks, critical systems)</li> <li>18-548: Memory Hierarchy. (Memory hiearchy from cache out to virtual memory) </li> </ol>"},{"location":"embedded/phil/#embedded-software-playlists-18-642","title":"Embedded Software Playlists 18-642","text":"<ol> <li>Course Overview</li> <li>Course administration</li> <li>Software Development Processes </li> <li>Code Style for Humans </li> <li>Code Style for Compilers </li> <li>Peer Reviews</li> <li>Requirements</li> <li>Global Variables </li> <li>Spaghetti Code</li> <li>Toyota UA Case Study </li> <li>Stack Overflow</li> <li>SW Architecture HLD </li> <li>Statecharts</li> <li>Traceability </li> <li>Software Testing Overview</li> <li>Unit Testing</li> <li>Integration Testing </li> <li>System-Level Test</li> <li>Concurrency Race Conditions </li> <li>SQA isn't testing</li> <li>Lifecycle CM</li> <li>Maintenance</li> <li>Key Metrics</li> <li>Date/Time</li> <li>Floating Point Pitfalls </li> <li>Safety Overview</li> <li>Dependability</li> <li>Critical Systems </li> <li>Safety Plan</li> <li>Single Points of Failure </li> <li>Safety Requirements</li> <li>Critical System Isolation </li> <li>Redundancy Management  </li> <li>Safety Architecture Patterns </li> <li>Data Integrity </li> <li>Cryptography</li> <li>Security Plans</li> <li>Security Threats </li> <li>Security Vulnerabilities</li> <li>Security Mitigation Validation</li> <li>Security Pitfalls</li> </ol>"},{"location":"embedded/shawn-hymel-digikey/","title":"Shawn Hymel Digikey","text":""},{"location":"embedded/shawn-hymel-digikey/#shawn-hymel-digikey","title":"Shawn Hymel Digikey","text":""},{"location":"embedded/shawn-hymel-digikey/#on-youtube","title":"On Youtube","text":"<ol> <li>Getting Started with STM32 and Nucleo</li> <li>Introduction to RTOS</li> <li>Introduction to Embedded Linux</li> <li>Introduction to FPGA</li> <li>KiCad Tutorial</li> <li>Shawn Hymel presents : IoT AI &amp; ML</li> <li>Intro to Raspberry Pi Pico and RP2040</li> </ol>"},{"location":"embedded/shawn-hymel-digikey/#on-github","title":"On Github","text":"<ol> <li>Introduction to RTOS</li> <li>Introduction to FPGA</li> </ol>"},{"location":"embedded/shriram-vasudevan/","title":"Shriram vasudevan","text":""},{"location":"embedded/shriram-vasudevan/#shriram-vasudevan","title":"Shriram Vasudevan","text":"<ol> <li>Linux/Unix System Programming</li> <li>Embedded C Plus Plus</li> </ol>"},{"location":"embedded/shriram-vasudevan/#embedded-interview","title":"Embedded Interview","text":""},{"location":"embedded-linux/bootlin/","title":"Bootlin","text":""},{"location":"embedded-linux/bootlin/#bootlin","title":"Bootlin","text":""},{"location":"embedded-linux/bootlin/#visual-studio-code-for-embedded-development","title":"Visual Studio Code for Embedded Development","text":""},{"location":"embedded-linux/bootlin_linux_tech/","title":"Bootlin Training","text":"<p>https://bootlin.com/docs/ https://elixir.bootlin.com/linux/latest/source</p>"},{"location":"embedded-linux/bootlin_linux_tech/#all-training","title":"All Training","text":"<ol> <li>https://bootlin.com/doc/training/autotools/</li> <li>https://bootlin.com/doc/training/boot-time/</li> <li>https://bootlin.com/doc/training/buildroot/</li> <li>https://bootlin.com/doc/training/buildroot-stm32/</li> <li>https://bootlin.com/doc/training/debugging/</li> <li>https://bootlin.com/doc/training/embedded-linux/</li> <li>https://bootlin.com/doc/training/embedded-linux-bbb/</li> <li>https://bootlin.com/doc/training/embedded-linux-qemu/</li> <li>https://bootlin.com/doc/training/embedded-linux-4d/</li> <li>https://bootlin.com/doc/training/graphics/</li> <li>https://bootlin.com/doc/training/linux-kernel/</li> <li>https://bootlin.com/doc/training/preempt-rt/</li> <li>https://bootlin.com/doc/training/yocto/</li> <li>https://bootlin.com/doc/training/yocto-stm32/</li> </ol>"},{"location":"embedded-linux/bootlin_linux_tech/#all-sources","title":"All Sources","text":""},{"location":"embedded-linux/bootlin_linux_tech/#1-arm-trusted-firmware-tf-a","title":"1. ARM Trusted Firmware (TF-A)","text":"<p>is a reference implementation of secure world software for ARMv7-A, ARMv8-A, and ARMv8.1-A processors. It provides a set of secure software components that enable TrustZone technology for ARM processors, including Secure Boot, Secure Monitor, and Trusted Board Boot Requirements (TBBR).</p> <p>ARM Trusted Firmware is a set of firmware components for ARM-based systems that implement various security features, such as secure boot, Trusted Execution Environment (TEE), and Secure Monitor. It is designed to work with ARM processors and provides a secure foundation for building trusted systems.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#2-op-tee-open-portable-trusted-execution-environment","title":"2. OP-TEE (Open Portable Trusted Execution Environment)","text":"<p>is a software stack that provides a secure execution environment for trusted applications on ARM-based systems. It utilizes the ARM TrustZone technology to isolate and protect critical code and data from untrusted applications running on the same system.</p> <p>OP-TEE (Open Portable Trusted Execution Environment) is a TEE (Trusted Execution Environment) for ARM-based processors. It provides a secure environment for running trusted applications, such as mobile payments and secure boot, and is designed to work with ARM Trusted Firmware.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#3-u-boot","title":"3. U-Boot","text":"<p>is a widely used open-source bootloader for embedded systems and devices. It can load and boot various operating systems and applications from different storage devices, and provides a flexible and customizable boot environment with support for various hardware configurations and features.</p> <p>U-Boot (Universal Bootloader) is a bootloader that is used to load operating systems on embedded systems. It provides a command-line interface for configuring and booting the system, as well as support for a wide range of hardware.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#4-linux","title":"4. Linux","text":"<p>is a widely used open-source Unix-like operating system kernel. It provides the core functionality and services for running user-space applications and managing system resources, including process and memory management, file systems, networking, and device drivers.</p> <p>Linux is a free and open-source operating system kernel. It is used as the foundation for many different operating systems, such as Android, Chrome OS, and various Linux distributions. Linux provides a wide range of features, such as memory management, process scheduling, and file systems.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#5-amazon-freertos","title":"5. Amazon FreeRTOS","text":"<p>is an open-source operating system for microcontrollers that makes small, low-power edge devices easy to program, deploy, secure, connect, and manage. It includes an MQTT broker, Wi-Fi and Bluetooth connectivity, over-the-air updates, and built-in security.</p> <p>Amazon FreeRTOS is an open-source operating system for microcontrollers that enables developers to easily and securely connect IoT devices to the cloud. It includes libraries that provide support for AWS services, such as AWS IoT Core, as well as a kernel for managing the microcontroller's resources.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#6-barebox","title":"6. Barebox","text":"<p>is a versatile and customizable bootloader that supports a wide range of hardware architectures and configurations. It can load and boot operating systems such as Linux, Android, and others from various storage devices, including flash, SD card, network, and USB.</p> <p>Barebox is a bootloader that supports a wide range of processors and platforms. It is designed to be fast, flexible, and easy to use. Barebox provides a command-line interface for configuring and booting the system, as well as a scripting language for more complex tasks.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#7-bluez","title":"7. BlueZ","text":"<p>is the official Linux Bluetooth protocol stack. It provides support for core Bluetooth layers such as L2CAP, RFCOMM, and the Bluetooth Low Energy (BLE) protocol. It also includes many user-space utilities for Bluetooth device management and configuration.</p> <p>Bluez is the official Bluetooth stack for Linux. It provides support for the Bluetooth protocol and enables communication between Bluetooth devices and the host system. Bluez includes a number of utilities for managing Bluetooth devices, such as pairing, scanning, and connecting.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#8-busybox","title":"8. BusyBox","text":"<p>is a collection of Unix utilities designed for embedded systems and low-resource environments. It includes small versions of common shell utilities such as cp, mv, and ls, as well as other common utilities like grep, awk, and sed, all combined into a single binary.</p> <p>BusyBox is a collection of Unix utilities that are designed to be small and efficient. It provides a single binary that includes many common Unix utilities, such as ls, cp, and grep. BusyBox is often used in embedded systems where space and resources are limited.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#9-coreboot","title":"9. coreboot","text":"<p>is an open-source firmware replacement for the BIOS (Basic Input/Output System) or UEFI (Unified Extensible Firmware Interface) in modern PCs. It provides a lightweight and customizable boot environment that can support various operating systems and hardware configurations.</p> <p>Coreboot is an open-source firmware that replaces the proprietary firmware (BIOS or UEFI) found on most PCs. It is designed to be lightweight, fast, and customizable. Coreboot supports a wide range of hardware and can be configured to boot a variety of operating systems.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#10-dpdk-data-plane-development-kit","title":"10. DPDK (Data Plane Development Kit)","text":"<p>is a set of libraries and drivers for fast packet processing in user-space. It allows applications to bypass the kernel network stack and communicate directly with the network hardware, enabling high-performance networking applications such as routers, gateways, and load balancers.</p> <p>It is designed to run on Intel x86 processors and enables applications to bypass the kernel network stack and interact directly with the network hardware.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#11-glibc-gnu-c-library","title":"11. glibc (GNU C Library)","text":"<p>is the standard C library for the GNU operating system and other Unix-like systems. It provides the basic building blocks for writing C programs, including memory allocation, string and math functions, file input/output, and network communication.</p> <p>glibc (GNU C Library) is the standard C library for Linux. It provides a set of functions and macros that are commonly used by C programs, such as memory allocation, string manipulation, and file I/O.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#12-grub-grand-unified-bootloader","title":"12. GRUB (Grand Unified Bootloader)","text":"<p>is a widely used boot loader for Linux and other Unix-like operating systems. It can load and boot various operating systems from different storage devices, including hard drives, CD/DVDs, and network. It also provides a flexible and customizable boot environment with support for themes and various boot options.</p> <p>GRUB (Grand Unified Bootloader) is a bootloader that is used to load operating systems on PCs. It provides a menu that allows the user to select which operating system to boot, as well as configuration options for the kernel and boot parameters.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#13-llvm-low-level-virtual-machine","title":"13. LLVM (Low-Level Virtual Machine)","text":"<p>is a collection of modular and reusable compiler and toolchain technologies. It includes a compiler front-end for various programming languages, a code optimizer, a code generator, and various analysis and debugging tools.</p> <p>LLVM (Low-Level Virtual Machine) is a compiler infrastructure that is used to build a wide range of programming languages. It provides a set of libraries and tools for optimizing, compiling, and linking code. LLVM is often used in conjunction with Clang, a C/C++ compiler that uses LLVM as its back end.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#14-mesa","title":"14. Mesa","text":"<p>is an open-source implementation of the OpenGL and Vulkan graphics APIs. It provides a set of user-space libraries and drivers that allow applications to interact with 3D graphics hardware and render high-quality graphics on various platforms.</p> <p>Mesa is an open-source implementation of the OpenGL and Vulkan graphics APIs. It provides drivers for a wide range of hardware and enables applications to render 3D graphics on Linux and other operating systems.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#15-musl","title":"15. musl","text":"<p>is a lightweight and fast C library designed for embedded and low-resource systems. It provides a subset of the standard C library functions and features, optimized for size, speed, and security.</p> <p>musl is a lightweight C library that is designed to be small and fast. It provides a subset of the POSIX API and is often used in embedded systems where space and resources are limited.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#16-ofono","title":"16. oFono","text":"<p>is an open-source telephony stack for mobile devices running Linux. It provides a set of user-space libraries and daemons that handle various aspects of mobile telephony, such as voice calls, SMS messaging, and mobile data.</p> <p>Ofono is a telephony stack for Linux. It provides support for mobile broadband and voice communication, as well as messaging and phonebook management. Ofono is often used in embedded systems, such as automotive infotainment systems and IoT devices.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#17-qemu-quick-emulator","title":"17. QEMU (Quick Emulator)","text":"<p>is a free and open-source emulator and virtualizer that can run a wide range of operating systems and hardware platforms. It can emulate different CPUs, devices, and network interfaces, and support various virtualization modes such as full virtualization, para-virtualization, and hardware-assisted virtualization.</p> <p>QEMU (Quick EMUlator) is a virtual machine emulator that can run a variety of guest operating systems on a host system. It provides support for a wide range of architectures, including x86, ARM, and PowerPC, and can emulate a variety of devices, such as disks, network cards, and USB controllers.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#18-toybox","title":"18. Toybox","text":"<p>is a small and modular implementation of common Unix utilities designed for embedded systems and low-resource environments. It provides a set of lightweight and customizable tools such as ls, cp, mv, and chmod, that can be used to build custom Linux distributions or systems.</p> <p>Toybox is a collection of Unix utilities that are designed to be small and lightweight. It provides a single binary that includes many common Unix utilities, such as ls, cp, and grep, and is often used in embedded systems.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#19-uclibc-ng-micro-c-library-next-generation","title":"19. uClibc-ng (Micro C Library Next Generation)","text":"<p>is a lightweight and optimized C library designed for embedded and low-resource systems. It provides a subset of the standard C library functions and features, optimized for size, speed, and memory footprint.</p> <p>uClibc-ng (Micro C Library Next Generation) is a lightweight C library that is designed to be small and fast. It provides a subset of the POSIX API and is often used in embedded systems where space and resources are limited.</p>"},{"location":"embedded-linux/bootlin_linux_tech/#20-zephyr","title":"20. Zephyr","text":"<p>is an open-source real-time operating system (RTOS) designed for resource-constrained and connected devices. It provides a small and flexible kernel, with support for various hardware architectures and connectivity protocols. It also includes various components for device management, security, and connectivity.</p> <p>Zephyr is an open-source real-time operating system (RTOS) for embedded systems. It is designed to be scalable, modular, and secure, and provides support for a wide range of hardware platforms. Zephyr is often used in IoT devices, wearables, and other embedded systems.</p>"},{"location":"embedded-linux/cool-camera/","title":"Cool Camera","text":""},{"location":"embedded-linux/cool-camera/#coolcamera","title":"CoolCamera","text":"<ol> <li>Embedded Linux &amp; PDF</li> <li>Reverse Engineering &amp; PDF</li> <li>AlgorithmsAndDataStructures PDF</li> </ol>"},{"location":"embedded-linux/hariharan/","title":"HariHaran","text":""},{"location":"embedded-linux/hariharan/#neevee-hariharan","title":"NeeVee Hariharan","text":""},{"location":"embedded-linux/learn-linux-tv/","title":"Learn Linux TV","text":""},{"location":"embedded-linux/learn-linux-tv/#learn-linux-tv","title":"Learn Linux TV","text":""},{"location":"embedded-linux/phytec/","title":"PhyTec","text":""},{"location":"embedded-linux/phytec/#rugged-board-phytec","title":"Rugged Board [PHYTEC]","text":"<p>Embedded Linux Session</p>"},{"location":"embedded-linux/tech-byte/","title":"Tech A Byte","text":""},{"location":"embedded-linux/tech-byte/#yocto-project-tutorial-series","title":"Yocto Project Tutorial Series","text":"<ul> <li>00 Introduction to Yocto - Building Linux for BeagleBone Black (STEP WISE!!) </li> <li>01 Flashing Yocto Built Custom Linux OS onto BeagleBone Black (STEP-BY-STEP!!)</li> <li>02 Understanding the local.conf in Yocto: How to Customize Linux Distribution </li> <li>03 Understanding the bblayers.conf File in Yocto (IN-DEPTH GUIDE!!)</li> <li>04 Adding Packages (IMAGE_INSTALL) - Customizing OS with Yocto (Step by Step)</li> <li>05 Create and Add Layer with Yocto (Detailed!!)</li> <li>06 Understand Basic Yocto Variables (WITH EXAMPLES!!) | PN PV PR WORKDIR S D B</li> <li>07 Variable Assignment Operators (Part-1) | Types of Variable Assignment Operators (Detail!) </li> <li>07 Variable Assignment Operators (Part-2) | Setting Default Value ?=, ??= (With Example!!) </li> <li>07 Variable Assignment Operators(Part-3) | Overriding Default Value =, := (With Example) </li> <li>07 Variable Assignment Operators (Part-4) | Append(+=) and Prepend(=+) with Spaces </li> <li>07 Variable Assignment Operators (Part-5) | Append(.=) and Prepend(=.) without Spaces </li> <li>07 Variable Assignment Operators (Part-6) | :append :prepend and :remove (With Example!!) </li> <li>08 Creating a Simple Hello World Yocto Recipe(FROM SCRATCH!) | With C Program </li> <li>09 Yocto Build Tasks (Part-1) | A Brief Description </li> <li>09 Yocto Build Tasks (Part-2) | do_fetch (With Example!!) </li> <li>09 Yocto Build Tasks (Part-3) | do_unpack (With Example!!) </li> <li>09 Yocto Build Tasks (Part-4) | do_patch (With Example!!) </li> <li>09 Yocto Build Tasks (Part-5) | do_configure (With Example!!) </li> <li>09 Yocto Build Tasks (Part-6) | do_compile (With Example!!) </li> <li>09 Yocto Build Tasks (Part-7) | do_install (With Example!!) </li> <li>10 How to create a Patch for a Recipe | Step by Step in Detail Guide </li> <li>11 How to Add Runtime Dependencies | RDEPENDS | A Comprehensive Guide </li> <li>12 Demystifying RPROVIDES | With Easy to Understand Examples </li> <li>13 Managing Package Conflicts with RCONFLICTS | Clear Cut Examples </li> <li>14 Exploring Build Dependencies (PART-1) | DEPENDS | Example with Testing </li> <li>14 Exploring Build Dependencies (PART-2) | DEPENDS | Example with Testing </li> <li>15 Build Dependencies Management | PROVIDES </li> <li>16 Customizing Package Provider | PREFERRED PROVIDER </li> </ul>"},{"location":"embedded-linux/techno-genius/","title":"Techno Genius","text":""},{"location":"embedded-linux/techno-genius/#techo-genius-academy","title":"Techo Genius Academy","text":""},{"location":"embedded-linux/the-linux-foundation/","title":"The Linux Foundation","text":""},{"location":"embedded-linux/the-linux-foundation/#the-linux-foundation","title":"The Linux Foundation","text":""},{"location":"embedded-linux/the-linux-foundation/#embedded-linux-training","title":"Embedded Linux Training","text":""},{"location":"embedded-linux/the-linux-foundation/#embedded-linux-conference-elc","title":"Embedded Linux Conference ELC","text":"<ol> <li>Embedded Open Source Summit EOSS</li> <li>Embedded IoT Summit EOSS</li> <li>Safety-Critical Software Summit EOSS</li> <li>Real Time Linux Summit EOSS</li> </ol>"},{"location":"embedded-tech/","title":"Linux Technology","text":"<ol> <li>https://www.gnome.org/getting-gnome/</li> <li>https://manpages.ubuntu.com/manpages/jammy/</li> <li>https://www.devicetree.org/</li> <li>https://xenproject.org/about-us/project-members/</li> </ol>"},{"location":"embedded-tech/#jaycarlson","title":"JayCarlson","text":"<ol> <li>Embedded-Linux</li> <li>Microcontrollers</li> </ol>"},{"location":"embedded-tech/#technology","title":"Technology","text":"<ol> <li>https://trustedcomputinggroup.org/membership/member-companies/</li> <li>https://www.arm.com/partners/catalog/</li> <li>https://www.keil.com/dd/parms/arm.htm</li> <li>https://www.automotivelinux.org/about/members/</li> <li>https://www.mipi.org/membership/all-member-directory</li> <li>https://www.jedec.org/about-jedec/member-list</li> <li>https://pcisig.com/membership/member-companies</li> <li>https://www.wi-fi.org/membership/member-companies</li> <li>https://www.bluetooth.com/develop-with-bluetooth/join/member-directory/</li> <li>https://www.ctia.org/about-ctia/our-members [Mobile Industry]</li> <li>https://www.sdcard.org/about-sda/member-companies/</li> <li>https://www.usb.org/members</li> </ol>"},{"location":"embedded-tech/#git-repos-list","title":"Git Repos list","text":"<ol> <li>https://git.kernel.org/</li> <li>https://github.com/devicetree-org/devicetree-specification/releases</li> </ol>"},{"location":"embedded-tech/#benchmarks","title":"Benchmarks","text":"<ol> <li>Android - iOS - Mac - Processor Benchmarks </li> <li>MCU - MPU - Processor Benchmarks </li> </ol>"},{"location":"embedded-tech/#wikis","title":"Wikis","text":"<ol> <li>https://en.wikipedia.org/wiki/List_of_ARM_processors</li> <li>https://en.wikipedia.org/wiki/List_of_semiconductor_IP_core_vendors</li> </ol>"},{"location":"embedded-tech/Audio-and-Multimedia/Readme/","title":"Audio and Multimedia","text":"<ul> <li>ALSA (Advanced Linux Sound Architecture): Kernel-level audio architecture for providing device drivers, APIs, and libraries for audio functionality.</li> <li>GStreamer: A multimedia framework for constructing graphs of media-handling components.</li> </ul>"},{"location":"embedded-tech/Audio-and-Multimedia/Readme/#mipi-technology","title":"MIPI Technology","text":"<ol> <li>https://www.mipi.org/</li> <li>https://www.mipi.org/current-specifications</li> <li>https://www.mipi.org/membership/all-member-directory</li> <li>https://mid.mipi.org/</li> </ol>"},{"location":"embedded-tech/Battery-Management/Readme/","title":"Battery Management","text":"<p>Optimization of power consumption and battery life in battery-powered embedded devices, including sleep modes, power gating, and low-power hardware components.</p>"},{"location":"embedded-tech/Build-Systems/Readme/","title":"Build Systems","text":"<p>Buildroot: A simple and efficient build system designed to generate root filesystems and bootloaders for embedded systems.</p> <p>Yocto Project: A framework for creating embedded Linux distributions, providing tools, metadata, and documentation.</p> <p>Makefile</p> <p>CMake</p>"},{"location":"embedded-tech/Cloud-Integration/Readme/","title":"Cloud Integration","text":"<p>SDKs and APIs for connecting embedded devices to cloud platforms like AWS IoT, Google Cloud IoT, or Microsoft Azure IoT.</p>"},{"location":"embedded-tech/Cross-Compilation-Toolchains/Readme/","title":"Cross Compilation Toolchains","text":"<p>Tools like GCC (GNU Compiler Collection) and LLVM/Clang configured for cross-compilation, enabling developers to compile code for architectures different from the one they are developing on.</p>"},{"location":"embedded-tech/Debugging-and-Profiling/Readme/","title":"Debugging and Profiling","text":"<ul> <li>GDB (GNU Debugger): A powerful debugger for debugging C, C++, and other languages.</li> <li>strace: A diagnostic, debugging, and instructional utility for monitoring system calls and signals.</li> <li>perf: A performance analysis tool for Linux systems.</li> </ul>"},{"location":"embedded-tech/Device-Drivers/Readme/","title":"Device Drivers","text":"<ul> <li>GPIO (General Purpose Input/Output): Drivers for controlling GPIO pins on embedded systems.</li> <li>SPI (Serial Peripheral Interface): Drivers for interfacing with SPI devices.</li> <li>I2C (Inter-Integrated Circuit): Drivers for communicating with I2C devices.</li> <li>UART (Universal Asynchronous Receiver-Transmitter): Drivers for serial communication.</li> <li>Ethernet/Wi-Fi/Bluetooth: Drivers for networking and wireless communication.</li> </ul>"},{"location":"embedded-tech/Documentation-and-Community-Resources/Readme/","title":"Documentation and Community Resources","text":"<p>Online forums, wikis, and community resources providing guidance, tutorials, and troubleshooting assistance for embedded Linux development.</p>"},{"location":"embedded-tech/Firmware-Updates-and-OTA-Updates/Readme/","title":"Firmware Updates and OTA Updates","text":"<p>Tools and protocols for securely updating firmware and software on embedded devices remotely.</p>"},{"location":"embedded-tech/Frameworks-and-Libraries/Readme/","title":"Frameworks and Libraries","text":"<ul> <li>BusyBox: A collection of common UNIX utilities combined into a single executable, often used in embedded systems to conserve space.</li> <li>Qt: A cross-platform application framework commonly used for graphical user interfaces (GUIs) in embedded Linux systems.</li> <li>OpenEmbedded: The build framework behind the Yocto Project, allowing customization and optimization of embedded Linux distributions.</li> </ul>"},{"location":"embedded-tech/Graphics-and-Display/Readme/","title":"Graphics and Display","text":"<ul> <li>DRM (Direct Rendering Manager): Kernel subsystem for managing graphics drivers and rendering hardware.</li> <li>Wayland: A protocol for compositors to communicate with their clients, often used as a replacement for X11 in modern embedded systems.</li> <li>FBdev (Framebuffer Device): Kernel interface for graphics hardware, used for simple 2D rendering.</li> </ul>"},{"location":"embedded-tech/Human-Machine-Interface-HMI/Readme/","title":"Human Machine Interface HMI","text":"<ul> <li>Touchscreen Displays: Integration of touchscreen interfaces for user interaction in embedded systems.</li> <li>Physical Buttons and LEDs: Hardware interfaces for user input and feedback in embedded devices.</li> <li>Voice Recognition: Integration of speech recognition technology for hands-free interaction with embedded systems.</li> </ul>"},{"location":"embedded-tech/Industrial-Standards-and-Protocols/Readme/","title":"Industrial Standards and Protocols","text":"<p>Support for industrial protocols like Modbus, PROFIBUS, EtherCAT, and OPC UA for industrial automation and control applications.</p>"},{"location":"embedded-tech/Linux-Kernel/Readme/","title":"Linux Kernel","text":"<p>Linux Kernel: The core of the Linux operating system, responsible for hardware abstraction, process management, memory management, and more.</p>"},{"location":"embedded-tech/Localization-and-Internationalization/Readme/","title":"Localization and Internationalization","text":"<p>Support for multiple languages, character encodings, and regional settings in embedded Linux systems.</p>"},{"location":"embedded-tech/Machine-Learning-and-AI-Integration/Readme/","title":"Machine Learning and AI Integration","text":"<ul> <li>TensorFlow Lite: Lightweight version of TensorFlow optimized for running machine learning models on embedded devices.</li> <li>ONNX (Open Neural Network Exchange): Open format for representing deep learning models, allowing interoperability between different frameworks.</li> </ul>"},{"location":"embedded-tech/Networking-Protocols/Readme/","title":"Networking Protocols","text":"<ul> <li>TCP/IP stack: The standard networking protocol suite used for communication between embedded devices and other systems.</li> <li>CAN (Controller Area Network): A robust serial communication protocol widely used in automotive and industrial applications.</li> <li>MQTT (Message Queuing Telemetry Transport): A lightweight messaging protocol ideal for IoT applications.</li> </ul>"},{"location":"embedded-tech/Open-Source-Hardware-Projects/Readme/","title":"Open Source Hardware Projects","text":"<p>Integration with open-source hardware platforms and projects like Arduino, Raspberry Pi, and BeagleBone for prototyping and development.</p>"},{"location":"embedded-tech/Package-Managers/Readme/","title":"Package Managers","text":"<p>APT (Advanced Package Tool): A package management tool commonly used in Debian-based Linux distributions, including some embedded variants.</p>"},{"location":"embedded-tech/Power-Management/Readme/","title":"Power Management","text":"<p>Frameworks and tools for managing power consumption in embedded Linux systems, including CPU frequency scaling, suspend/resume functionality, and power-aware scheduling.</p>"},{"location":"embedded-tech/RTOS-Integration/Readme/","title":"RTOS Integration","text":"<p>Integration of Real-Time Operating Systems (RTOS) like FreeRTOS, Zephyr, or RTLinux alongside Linux in mixed-criticality systems.</p>"},{"location":"embedded-tech/Remote-Monitoring-and-Management/Readme/","title":"Remote Monitoring and Management","text":"<p>Tools and protocols for remotely monitoring and managing embedded devices, including SNMP (Simple Network Management Protocol) and remote SSH access.</p> <p>WoL WoWLAN</p>"},{"location":"embedded-tech/Safety-Critical-Systems/Readme/","title":"Safety Critical Systems","text":"<p>Compliance with safety standards such as ISO 26262 (automotive), IEC 61508 (industrial), and DO-178C (aerospace) for developing safety-critical embedded systems.</p>"},{"location":"embedded-tech/Security-Features/Readme/","title":"Security Features","text":"<ul> <li>TPM (Trusted Platform Module): Hardware-based security module for storing cryptographic keys and performing secure boot and attestation.</li> <li>Secure Boot: Process of validating the authenticity of firmware and software during the boot process to prevent unauthorized code execution.</li> <li>Secure Firmware Update: Mechanisms for securely updating firmware to protect against tampering and ensure integrity.</li> <li>Encryption and Authentication: Utilization of encryption algorithms and authentication protocols to secure data transmission and storage.</li> </ul>"},{"location":"embedded-tech/Sensor-Integration/Readme/","title":"Sensor Integration","text":"<ul> <li>Accelerometer, Gyroscope, and Magnetometer: Sensors commonly used for motion sensing and orientation detection.</li> <li>Temperature, Humidity, and Pressure Sensors: Environmental sensors used in applications like weather monitoring and HVAC control.</li> <li>Camera and Image Sensors: Integration of cameras and image sensors for capturing images and video in embedded systems.</li> </ul>"},{"location":"embedded-tech/Single-Board-Computers/Readme/","title":"Single Board Computers","text":"<p>Platforms like Raspberry Pi, BeagleBone, and NVIDIA Jetson provide affordable and versatile hardware for prototyping and deploying embedded Linux projects.</p>"},{"location":"semi-companies/open-nxp/","title":"Open NXP","text":""},{"location":"semi-companies/open-nxp/#linux-reference","title":"Linux Reference","text":"<ul> <li>6.1 Capture Overview</li> <li>6.2 Display Overview</li> <li>6.3 Display Controllers</li> <li>6.4 Display Interfaces</li> <li>6.5 Video for Linux 2 (V4L2)</li> <li>6.6 Video Analog-to-Digital Converter (VADC)</li> <li>6.7 Video Processing Unit (VPU)</li> <li>6.8 JPEG Encoder and Decoder</li> </ul>"},{"location":"semi-companies/open-nxp/#graphics-user-guide","title":"Graphics User Guide","text":"<ul> <li>1.1 i.MX full GPU line</li> </ul>"},{"location":"skills-youtube/books/","title":"Book Summary","text":"<ul> <li>The Art of Improvement</li> <li>Better Than Yesterday</li> <li>Escaping Ordinary</li> <li>HumJeetenge</li> <li>FundooProgramming</li> <li>GIGLIndia</li> <li>yebook</li> <li>ReadersBooksClub</li> <li>LifeGyan</li> </ul>"},{"location":"skills-youtube/business/","title":"Business","text":"<ul> <li>Business Casual</li> </ul>"},{"location":"skills-youtube/practical-life/","title":"Practical Life","text":"<ul> <li>PracticalWisdom</li> <li>namaskarprasad</li> <li>lisanetwork-RE</li> <li>Pushkar Raj Thakur: Business Coach</li> <li>Big Think</li> </ul>"},{"location":"social-YT/social/","title":"Social","text":""},{"location":"social-YT/social/#socialblade","title":"socialblade","text":""},{"location":"techonology/IDE/vs_code_extension/","title":"Vs code extension","text":"<ol> <li> <p>C/C++ https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools</p> </li> <li> <p>Git lens https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens</p> </li> <li> <p>Git Graph https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph </p> </li> <li> <p>Jupyter notebook https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter</p> </li> <li> <p>CMake Tools https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools</p> </li> <li> <p>VS Code Icons https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons</p> </li> <li> <p>Code Spell Checker https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker</p> </li> <li> <p>ToDo tree https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree</p> </li> </ol>"},{"location":"youtube/altium-designer/","title":"Altium Designer","text":""},{"location":"youtube/altium-designer/#altium-training","title":"Altium Training","text":"<ol> <li> <p>Altium Academy 50k</p> <ul> <li>MCU STM32</li> <li>nRF52 Series</li> <li>All Industry Expert</li> <li>Design for Excellence</li> </ul> </li> <li> <p>Robert Feranec Fedvel 100k</p> </li> <li>Esteem PCB 10k</li> <li>Shristi Electronics Hindi 2k</li> </ol>"},{"location":"youtube/crash-course/","title":"Crash Course","text":""},{"location":"youtube/crash-course/#crashcourse","title":"CrashCourse","text":"<ol> <li>Engineering</li> <li>Computer Science</li> <li>Artificial Intelligence</li> <li>Economics</li> </ol>"},{"location":"youtube/crash-course/#business","title":"Business","text":"<ol> <li>Business Soft Skills</li> <li>Business Entrepreneurship </li> </ol>"},{"location":"youtube/engineering-mindset/","title":"The Engineering Mindset","text":""},{"location":"youtube/engineering-mindset/#the-engineering-mindset","title":"The Engineering Mindset","text":""},{"location":"youtube/engineering-mindset/#engineering-mindset-in-hindi","title":"Engineering Mindset in Hindi","text":""},{"location":"youtube/engineerspost/","title":"Engineers Post","text":""},{"location":"youtube/engineerspost/#the-engineers-post","title":"The Engineers Post","text":""},{"location":"youtube/lesics/","title":"Lesics","text":""},{"location":"youtube/lesics/#lesics","title":"Lesics","text":""},{"location":"youtube/realpars/","title":"Realpars","text":""},{"location":"youtube/realpars/#realpars","title":"RealPars","text":"<p>RealPars is the world's largest online learning platform for automation engineers.</p>"}]}