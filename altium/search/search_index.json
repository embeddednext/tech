{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Altium","text":""},{"location":"#index","title":"Index","text":"<p>https://www.crowdsupply.com/ov-tech-gmbh/pi-mx8-module</p>"},{"location":"ch1/","title":"Introduction and Overview","text":"<p>Reference</p> <p>The Raspberry Pi company has developed what is probably the most popular and widely used single board computer on the market. These powerful single-board computers have long been used not only in the maker and hobbyist scene, but also in the industrial space.</p> <p>As the application area expands, the form factor of these boards is emerging as a 'de facto' standard for single board computers and modules. The introduction of the compute module CM4 in late 2020 marked the establishment of a new form factor standard for system-on-modules.</p> <p>Since then, various SoCs from manufacturers like Allwinner and Rockchip, along with robust FPGAs, have seamlessly integrated into the widely adopted CM4 form factor.</p>"},{"location":"ch1/#motivation","title":"Motivation","text":"<p>The Pi.MX8 module will join the list of CM4 compatible modules.</p> <p>With all this variety of compatible SoMs available, why should we invest time in designing yet another variant?</p> <p>The answer is simple: when we build a complex and sometimes costly system around a computer module, we also want to have design sovereignty over the module itself. We want to have access to the schematic and layout source data, we want to be able to decide on the BOM of the module ourselves in case of component shortages, and most importantly, we want to have access to the documentation of all components used on the PCB.</p> <p>All of this is only possible in the context of a fully open-source project, utilizing components with readily available documentation.</p> <p></p> <p>In this and the following articles we will be looking into designing a fully open-source CM4 compatible module. At the end of our journey the source data for the CM4 compatible module will be published for anyone to review, modify, or build upon!</p>"},{"location":"ch1/#selecting-the-main-soc","title":"Selecting the main SoC","text":"<p>The core building block we must define before choosing any of the peripheral components is the System-on-Chip. There is a SoC that meets all the requirements for easily accessible documentation and is widely used in the industry, the i.MX8M Plus from NXP.</p> <p>This SoC is available in several variants, ranging from two to four Cortex-A53 cores clocked at up to 1.8 GHz. Additionally, a secondary cortex M7 core and an integrated machine learning accelerator is available within this processor series.</p> <p>The i.MX8 provides almost all the peripheral interfaces as the BCM2711 used on the Raspberry Pi CM4 module with one major exception:</p> <p>Only one HDMI interface is available on the i.MX8 compared to two ports available on the BCM2711. This limitation could be bypassed by using a DSI to HDMI bridge. To keep the part count and complexity low this IC won\u00b4t be integrated on our module for now.</p> <p>Other than the second HDMI interface the i.MX8 is a great fit for our application!</p>"},{"location":"ch1/#peripheral-components","title":"Peripheral components","text":"<p>The module's high level block diagram consists of just a few key components. The central building block is the i.MX8 SoC which provides all the interfaces for the necessary peripheral components. Simply put, we are building a breakout board for the i.MX8 processor: </p>"},{"location":"ch1/#1-pmic","title":"1. PMIC","text":"<p>Let's start by looking at the power supply for the system. The power management IC (short PMIC) provides several voltage rails needed by the SoC, but is also designed to supply power to interfaces like the SD card connector.</p> <p>The PMIC is also responsible for ensuring the correct power-up and power-down sequence, which can get quite complicated for larger SoCs.</p> <p>NXP offers a PMIC that has been specially developed for use with the i.MX 8M application processors. This IC provides up to 11 voltage rails generated by a combination of buck converters and LDOs. The core voltages for the SoC are generated by buck converters as the current requirement is quite high at the low operating voltages. The voltage rail, which supplies the four A53 cores, is generated by a two-phase buck converter integrated in the PMIC to satisfy the high current demand.</p> <p>The PMIC we will be using is the PCA9450.</p>"},{"location":"ch1/#2-nor-flash","title":"2. NOR Flash","text":"<p>A low-capacity NOR flash can be used to store board-specific data as well as a boot medium. The i.MX8 SoC among others supports several SPI interfaces to access the boot medium. In this case, we are using a quad SPI interface to connect to a 32MB SPI NOR flash.</p> <p>The device is a IS25WP256D-RHLE from Integrated Silicon Solution, Inc.</p> <p>This specific package and pinout is also available from different manufacturers, making it possible to swap the component in the event of availability issues.</p>"},{"location":"ch1/#3-ethernet-phy","title":"3. Ethernet PHY","text":"<p>The ethernet PHY needs to support gigabit speeds as well as the precision time protocol in order to be compatible with the CM4 functionality. The interface to the SoC should be a reduced gigabit media-independent interface (RGMII). This interface type is supported by a wide variety of ethernet PHYs for embedded applications.</p> <p>We will be using the LAN8840 from Microchip Technology.</p> <p>This PHY supports both gigabit speeds as well as high precision time stamping according to IEEE 1588- 2008 (v2). The QFN48 package is also relatively compact which saves valuable board space on the module.</p>"},{"location":"ch1/#4-dram","title":"4. DRAM","text":"<p>We will be using low power DDR4 memory on the Pi.MX8 module. Several manufacturers provide LPDDR4 ICs in the same package and pinout which makes it easier to react to availability issues or to support multiple memory capacities. Samsung and Micron are the most commonly used manufacturers for LPDDR4 devices. We will be using devices supporting a 32-bit wide bus at transfer speeds of 3733 Mbps.</p> <p>The Pi.MX8 can be equipped with several memory capacities:</p> <p></p>"},{"location":"ch1/#5-coral-edge-tpu","title":"5. Coral Edge TPU","text":"<p>The coral edge TPU can be used to accelerate neural network computation on embedded devices. The Coral TPU is often used in the form of an M.2 expansion card, and is also available in a small LGA package.</p> <p>This module contains the tensor processor as well as the power management IC necessary for operating the TPU. We need to provide a PCIe interface to this module to make use of the available processing power.</p> <p>Because this module is specific to only a small number of use-cases and is relatively expensive, we will implement it as an assembly variant.</p>"},{"location":"ch1/#6-wifible-module","title":"6. WiFi/BLE Module","text":"<p>WiFi and Bluetooth low energy are one of the most commonly used wireless interfaces for IoT applications. We will be using a MURATA LBEE5PK2BC module as a fully integrated solution.</p> <p>This module provides both W-LAN and Bluetooth while minimizing the count of external components needed. Not every application needs wireless connectivity which is why the WiFi/BLE module will be implemented as an assembly variant as well.</p>"},{"location":"ch1/#7-emmc-storage","title":"7. eMMC storage","text":"<p>An eMMC module provides up to 32GB storage capacity to the Pi.MX8 module. As with the LPDDR4 DRAM we can choose between many manufacturers for the eMMC storage module that adhere to the same package and pinout standard. One of the most commonly used manufacturers for eMMC modules is SanDisk.</p> <p>The eMMC will also be implemented as an assembly variant in order to save BOM cost for applications that do not have a high demand for data storage capacity.</p>"},{"location":"ch1/#8-test-fitting-key-components","title":"8. Test fitting key components","text":"<p>Before moving onto the next stage of setting up the schematic and PCB design, let's take a quick look at the space requirements for all the components we\u00b4ve just selected.</p> <p></p> <p>For this purpose we can set up the PCB library components and place them within the PCB outline of the CM4 formfactor.</p> <p>All of the key components fit on the top layer within the CM4 formfactor outline. This rough placement also shows that there is little space left for larger components on the top side. The mated height of the board-to-board connectors we are using is only 2mm. This restricts the height of components we can place on the bottom side of the PCB. Ideally, all the key components will be placed on the top side of the board to avoid any collisions with parts that might be placed on the carrier board underneath the module.</p>"},{"location":"ch2/","title":"Component Placement and Layout Planning","text":"<p>Reference</p>"},{"location":"ch3/","title":"Board Layout Part 1","text":"<p>Reference</p>"},{"location":"ch4/","title":"Board Layout Part 2","text":"<p>Reference</p>"},{"location":"ch5/","title":"Board Layout Part 3","text":"<p>Reference</p>"},{"location":"ch6/","title":"Board Layout Part 4","text":"<p>Reference</p>"}]}